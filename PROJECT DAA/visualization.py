# -*- coding: utf-8 -*-
"""Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BwKYZQn7R-J_XJaGwQM2fM9IaWLT2url
"""

import networkx as nx
import matplotlib.pyplot as plt

def visualize_road_network(road_network: Dict[int, List[Tuple[int, float]]],
                           location_names: Dict[int, str]):
    """
    Visualizes the road network graph.

    Args:
    - road_network: Dictionary of road connections with distances
    - location_names: Dictionary of location names by node ID
    """
    G = nx.Graph()

    # Add nodes with location names
    for node, name in location_names.items():
        G.add_node(node, label=name)

    # Add edges (roads) with distances as edge weights
    for start, neighbors in road_network.items():
        for end, distance in neighbors:
            G.add_edge(start, end, weight=distance)

    # Draw the graph
    pos = nx.spring_layout(G)  # Layout for nodes positioning
    labels = nx.get_edge_attributes(G, 'weight')  # Get edge labels (distances)
    node_labels = nx.get_node_attributes(G, 'label')  # Get node labels (location names)

    plt.figure(figsize=(10, 8))
    nx.draw(G, pos, with_labels=True, node_size=2000, node_color="skyblue", font_size=10, font_weight="bold")
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
    plt.title("Road Network")
    plt.show()

def main():
    nav = NavigationSystem()

    locations = {
        0: ("City Center", 2.0),
        1: ("North District", 1.5),
        2: ("Business Park", 1.0),
        3: ("Suburban Area", 0.5),
        4: ("Industrial Zone", 3.0),
        5: ("University Campus", 2.5),
        6: ("Waterfront District", 1.0),
        7: ("Tech Hub", 1.5),
        8: ("Residential Complex", 0.5),
        9: ("Airport Vicinity", 2.0)
    }
    for node, (name, intersection_cost) in locations.items():
        nav.add_location(node, name, intersection_cost)

    road_conditions = [
        (0, 1, 15),
        (0, 2, 22),
        (0, 6, 18),
        (1, 2, 10),
        (1, 3, 18),
        (1, 7, 25),
        (2, 3, 25),
        (2, 4, 31),
        (2, 7, 20),
        (3, 4, 12),
        (3, 5, 20),
        (3, 8, 15),
        (4, 5, 15),
        (4, 9, 22),
        (5, 6, 18),
        (6, 7, 16),
        (7, 8, 14),
        (8, 9, 21)
    ]
    for start, end, distance in road_conditions:
        nav.add_road(start, end, distance)

    visualize_road_network(nav.road_network, nav.location_names)

if __name__ == "__main__":
    main()